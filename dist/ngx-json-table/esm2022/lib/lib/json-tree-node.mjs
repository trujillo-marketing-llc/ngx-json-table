export class JsonTreeNode {
    constructor(key, value, type, level, isArray, parent, children, showChildren) {
        this.edit = false;
        this.showEditPanel = false;
        this.error = false;
        this.isNew = false;
        this.id = `${Math.random().toString(36).substr(2, 9)}`;
        this.key = this.prevKey = key;
        this.value = this.prevValue = value;
        this.type = type;
        this.level = level ?? 0;
        this.isArray = isArray ?? false;
        this.parent = parent;
        this.children = children ?? [];
        this.showChildren = showChildren ?? false;
    }
    toggleShowChildren(allLevels = false) {
        this.showChildren = !this.showChildren;
        if (allLevels) {
            const processAllLevels = (parent) => {
                for (const child of parent.children) {
                    child.showChildren = parent.showChildren;
                    processAllLevels(child);
                }
            };
            processAllLevels(this);
        }
    }
    checkNotUniqueKey() {
        return (this.key === '' || (this.parent
            && this.parent.children.filter(c => c.id !== this.id && c.key === this.key).length > 0))
            && (this.error = true)
            && (setTimeout(() => this.error = false, 2000) !== null);
    }
    toggleEdit() {
        this.edit = !this.edit;
    }
    addChild(child) {
        this.children.push(child);
    }
    canAppear() {
        return this.canAppearCheck(this);
    }
    canAppearCheck(child) {
        if (!child.parent)
            return true;
        return child.parent.showChildren && this.canAppearCheck(child.parent);
    }
    get isComplex() {
        return this.type === 'object';
    }
    isKeyEditable() {
        return !this.parent?.isArray;
    }
    resetState() {
        this.key = this.prevKey;
        this.value = this.prevValue;
    }
    updateState() {
        this.prevKey = this.key;
        this.prevValue = this.value;
    }
    delete() {
        const parentIndex = this.parent.children.findIndex((node) => node.id === this.id);
        this.parent.children.splice(parentIndex, 1);
        if (this.parent.isArray) {
            for (let i = parentIndex; i < this.parent.children.length; i++) {
                this.parent.children[i].key = `${parseInt(this.parent.children[i].key, 10) - 1}`;
            }
        }
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoianNvbi10cmVlLW5vZGUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9uZ3gtanNvbi10YWJsZS9zcmMvbGliL2xpYi9qc29uLXRyZWUtbm9kZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLE9BQU8sWUFBWTtJQWlCdkIsWUFDRSxHQUFXLEVBQ1gsS0FBVSxFQUNWLElBQW1CLEVBQ25CLEtBQWMsRUFDZCxPQUFpQixFQUNqQixNQUFxQixFQUNyQixRQUF5QixFQUN6QixZQUFzQjtRQWJ4QixTQUFJLEdBQVksS0FBSyxDQUFDO1FBQ3RCLGtCQUFhLEdBQVksS0FBSyxDQUFDO1FBQy9CLFVBQUssR0FBWSxLQUFLLENBQUM7UUFDdkIsVUFBSyxHQUFZLEtBQUssQ0FBQztRQVlyQixJQUFJLENBQUMsRUFBRSxHQUFHLEdBQUcsSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDLFFBQVEsQ0FBQyxFQUFFLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUM7UUFDdkQsSUFBSSxDQUFDLEdBQUcsR0FBRyxJQUFJLENBQUMsT0FBTyxHQUFHLEdBQUcsQ0FBQztRQUM5QixJQUFJLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQyxTQUFTLEdBQUcsS0FBSyxDQUFDO1FBQ3BDLElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDO1FBQ2pCLElBQUksQ0FBQyxLQUFLLEdBQUcsS0FBSyxJQUFJLENBQUMsQ0FBQztRQUN4QixJQUFJLENBQUMsT0FBTyxHQUFHLE9BQU8sSUFBSSxLQUFLLENBQUM7UUFDaEMsSUFBSSxDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUM7UUFDckIsSUFBSSxDQUFDLFFBQVEsR0FBRyxRQUFRLElBQUksRUFBRSxDQUFDO1FBQy9CLElBQUksQ0FBQyxZQUFZLEdBQUcsWUFBWSxJQUFJLEtBQUssQ0FBQztJQUM1QyxDQUFDO0lBRUQsa0JBQWtCLENBQUMs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QU0sRUFBRSxDQUFDLEVBQUUsRUFBRTtnQkFDOUQsSUFBSSxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLEdBQUcsUUFBUSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsRUFBRSxFQUFFLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQzthQUNsRjtTQUNGO0lBQ0gsQ0FBQztDQUNGIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IHR5cGUgSnNvblZhbHVlVHlwZSA9ICdiaWdpbnQnIHwgJ251bWJlcicgfCAnc3RyaW5nJyB8ICdvYmplY3QnIHwgJ2Jvb2xlYW4nIHwgJ2Z1bmN0aW9uJyB8ICdzeW1ib2wnIHwgJ3VuZGVmaW5lZCc7XG5cbmV4cG9ydCBjbGFzcyBKc29uVHJlZU5vZGUge1xuICBpZDogc3RyaW5nO1xuICBrZXk6IHN0cmluZztcbiAgcHJldktleTogc3RyaW5nO1xuICB2YWx1ZTogYW55O1xuICBwcmV2VmFsdWU6IGFueTtcbiAgbGV2ZWw6IG51bWJlcjtcbiAgdHlwZTogSnNvblZhbHVlVHlwZTtcbiAgaXNBcnJheTogYm9vbGVhbjtcbiAgcGFyZW50OiBKc29uVHJlZU5vZGU7XG4gIGNoaWxkcmVuOiBKc29uVHJlZU5vZGVbXTtcbiAgc2hvd0NoaWxkcmVuOiBib29sZWFuO1xuICBlZGl0OiBib29sZWFuID0gZmFsc2U7XG4gIHNob3dFZGl0UGFuZWw6IGJvb2xlYW4gPSBmYWxzZTtcbiAgZXJyb3I6IGJvb2xlYW4gPSBmYWxzZTtcbiAgaXNOZXc6IGJvb2xlYW4gPSBmYWxzZTtcblxuICBjb25zdHJ1Y3RvcihcbiAgICBrZXk6IHN0cmluZyxcbiAgICB2YWx1ZTogYW55LFxuICAgIHR5cGU6IEpzb25WYWx1ZVR5cGUsXG4gICAgbGV2ZWw/OiBudW1iZXIsXG4gICAgaXNBcnJheT86IGJvb2xlYW4sXG4gICAgcGFyZW50PzogSnNvblRyZWVOb2RlLFxuICAgIGNoaWxkcmVuPzogSnNvblRyZWVOb2RlW10sXG4gICAgc2hvd0NoaWxkcmVuPzogYm9vbGVhbixcbiAgKSB7XG4gICAgdGhpcy5pZCA9IGAke01hdGgucmFuZG9tKCkudG9TdHJpbmcoMzYpLnN1YnN0cigyLCA5KX1gO1xuICAgIHRoaXMua2V5ID0gdGhpcy5wcmV2S2V5ID0ga2V5O1xuICAgIHRoaXMudmFsdWUgPSB0aGlzLnByZXZWYWx1ZSA9IHZhbHVlO1xuICAgIHRoaXMudHlwZSA9IHR5cGU7XG4gICAgdGhpcy5sZXZlbCA9IGxldmVsID8/IDA7XG4gICAgdGhpcy5pc0FycmF5ID0gaXNBcnJheSA/PyBmYWxzZTtcbiAgICB0aGlzLnBhcmVudCA9IHBhcmVudDtcbiAgICB0aGlzLmNoaWxkcmVuID0gY2hpbGRyZW4gPz8gW107XG4gICAgdGhpcy5zaG93Q2hpbGRyZW4gPSBzaG93Q2hpbGRyZW4gPz8gZmFsc2U7XG4gIH1cblxuICB0b2dnbGVTaG93Q2hpbGRyZW4oYWxsTGV2ZWxzOiBib29sZWFuID0gZmFsc2UpIHtcbiAgICB0aGlzLnNob3dDaGlsZHJlbiA9ICF0aGlzLnNob3dDaGlsZHJlbjtcbiAgICBpZiAoYWxsTGV2ZWxzKSB7XG4gICAgICBjb25zdCBwcm9jZXNzQWxsTGV2ZWxzID0gKHBhcmVudDogSnNvblRyZWVOb2RlKSA9PiB7XG4gICAgICAgIGZvciAoY29uc3QgY2hpbGQgb2YgcGFyZW50LmNoaWxkcmVuKSB7XG4gICAgICAgICAgY2hpbGQuc2hvd0NoaWxkcmVuID0gcGFyZW50LnNob3dDaGlsZHJlbjtcbiAgICAgICAgICBwcm9jZXNzQWxsTGV2ZWxzKGNoaWxkKTtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICAgIHByb2Nlc3NBbGxMZXZlbHModGhpcyk7XG4gICAgfVxuICB9XG5cbiAgY2hlY2tOb3RVbmlxdWVLZXkoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuICh0aGlzLmtleSA9PT0gJycgfHwgKHRoaXMucGFyZW50XG4gICAgICAmJiB0aGlzLnBhcmVudC5jaGlsZHJlbi5maWx0ZXIoYyA9PiBjLmlkICE9PSB0aGlzLmlkICYmIGMua2V5ID09PSB0aGlzLmtleSkubGVuZ3RoID4gMCkpXG4gICAgICAmJiAodGhpcy5lcnJvciA9IHRydWUpXG4gICAgICAmJiAoc2V0VGltZW91dCgoKSA9PiB0aGlzLmVycm9yID0gZmFsc2UsIDIwMDApICE9PSBudWxsKTtcbiAgfVxuXG4gIHRvZ2dsZUVkaXQoKSB7XG4gICAgdGhpcy5lZGl0ID0gIXRoaXMuZWRpdDtcbiAgfVxuXG4gIGFkZENoaWxkKGNoaWxkOiBKc29uVHJlZU5vZGUpIHtcbiAgICB0aGlzLmNoaWxkcmVuLnB1c2goY2hpbGQpO1xuICB9XG5cbiAgY2FuQXBwZWFyKCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0aGlzLmNhbkFwcGVhckNoZWNrKHRoaXMpO1xuICB9XG5cbiAgcHJpdmF0ZSBjYW5BcHBlYXJDaGVjayhjaGlsZDogSnNvblRyZWVOb2RlKSB7XG4gICAgaWYgKCFjaGlsZC5wYXJlbnQpIHJldHVybiB0cnVlO1xuICAgIHJldHVybiBjaGlsZC5wYXJlbnQuc2hvd0NoaWxkcmVuICYmIHRoaXMuY2FuQXBwZWFyQ2hlY2soY2hpbGQucGFyZW50KTtcbiAgfVxuXG4gIGdldCBpc0NvbXBsZXgoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMudHlwZSA9PT0gJ29iamVjdCc7XG4gIH1cblxuICBpc0tleUVkaXRhYmxlKCkge1xuICAgIHJldHVybiAhdGhpcy5wYXJlbnQ/LmlzQXJyYXk7XG4gIH1cblxuICByZXNldFN0YXRlKCkge1xuICAgIHRoaXMua2V5ID0gdGhpcy5wcmV2S2V5O1xuICAgIHRoaXMudmFsdWUgPSB0aGlzLnByZXZWYWx1ZTtcbiAgfVxuXG4gIHVwZGF0ZVN0YXRlKCkge1xuICAgIHRoaXMucHJldktleSA9IHRoaXMua2V5O1xuICAgIHRoaXMucHJldlZhbHVlID0gdGhpcy52YWx1ZTtcbiAgfVxuXG4gIGRlbGV0ZSgpIHtcbiAgICBjb25zdCBwYXJlbnRJbmRleCA9IHRoaXMucGFyZW50LmNoaWxkcmVuLmZpbmRJbmRleCgobm9kZSkgPT4gbm9kZS5pZCA9PT0gdGhpcy5pZCk7XG4gICAgdGhpcy5wYXJlbnQuY2hpbGRyZW4uc3BsaWNlKHBhcmVudEluZGV4LCAxKTtcbiAgICBpZiAodGhpcy5wYXJlbnQuaXNBcnJheSkge1xuICAgICAgZm9yIChsZXQgaSA9IHBhcmVudEluZGV4OyBpIDwgdGhpcy5wYXJlbnQuY2hpbGRyZW4ubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdGhpcy5wYXJlbnQuY2hpbGRyZW5baV0ua2V5ID0gYCR7cGFyc2VJbnQodGhpcy5wYXJlbnQuY2hpbGRyZW5baV0ua2V5LCAxMCkgLSAxfWA7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG4iXX0=