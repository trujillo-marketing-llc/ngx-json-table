import { Component, EventEmitter, HostListener, Input, Output } from '@angular/core';
import { JsonTreeNode } from '../../../lib/json-tree-node';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common";
import * as i2 from "../../../pipes/sanitize-html.pipe";
export class NgxJsonTableKeyComponent {
    constructor() {
        this.onChange = new EventEmitter();
    }
    onEscapeKeyListener() {
        this.item.resetState();
        this.item.edit && this.item.toggleEdit();
        if (this.item.isNew) {
            this.item.delete();
            this.onChange.emit('clean');
        }
    }
    onEnterKeyListener() {
        if (this.item.checkNotUniqueKey())
            return;
        this.item.toggleEdit();
        this.item.updateState();
        this.item.isNew = false;
        this.onChange.emit('edit');
    }
    addChild(isObject = false, isArray = false) {
        this.item.showChildren = true;
        const node = new JsonTreeNode(this.item.isArray ? '0' : '', '', isObject ? 'object' : 'string', this.item.level + 1, isArray, this.item);
        node.isNew = true;
        node.edit = true;
        if (this.item.isArray) {
            for (const child of this.item.children) {
                child.key = `${parseInt(child.key, 10) + 1}`;
            }
        }
        this.item.children.splice(0, 0, node);
        this.onChange.emit('add');
    }
    toggleDropdownMenu(dropdown) {
        const value = dropdown.style.display;
        dropdown.style.display = value === 'none' || value === '' ? 'block' : 'none';
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: NgxJsonTableKeyComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: NgxJsonTableKeyComponent, selector: "[ngx-json-table-key]", inputs: { item: "item", settings: "settings", icons: "icons" }, outputs: { onChange: "onChange" }, host: { listeners: { "keyup.escape": "onEscapeKeyListener()", "keyup.enter": "onEnterKeyListener()" } }, ngImport: i0, template: "<span [style]=\"{'margin-left': 20 * item.level + 'px'}\">\n  <span *ngIf=\"!item.isComplex\"\n        [innerHTML]=\"icons.simpleChild.html | sanitizeHtml\"></span>\n  <span *ngIf=\"item.isComplex\"\n        [innerHTML]=\"icons[item.showChildren ? 'collapse' : 'expand'].html | sanitizeHtml\"></span>\n  <span *ngIf=\"(!item.isNew && !settings.options.edit.key) || !item.edit || !item.isKeyEditable()\"\n        [ngStyle]=\"{cursor: item.isComplex ? 'pointer' : ''}\"\n        (click)=\"item.isComplex && item.toggleShowChildren($event['ctrlKey'])\" class=\"row-key-value\">{{item.key}}\n    <span style=\"color: darkgray\" *ngIf=\"item.isComplex\">\n      {{(item.isArray ? '[' : '{') + item.children.length + (item.isArray ? ']' : '}')}}\n    </span>\n  </span>\n  <span *ngIf=\"(item.isNew || settings.options.edit.key) && item.edit && item.isKeyEditable()\">\n    <input [value]=\"item.key\" #keyInput\n           [ngStyle]=\"{'border-color': item.error ? 'red' : ''}\"\n           (keyup)=\"item.key = keyInput.value.trim()\"/>\n  </span>\n  <span *ngIf=\"!item.edit && item.showEditPanel\" class=\"float-right\">\n    <span *ngIf=\"item.isComplex && settings.options.add\" (click)=\"toggleDropdownMenu(dropdown)\"\n          [innerHTML]=\"icons.addChild.html | sanitizeHtml\"></span>\n    <span class=\"dropdown-content\" #dropdown>\n      <span (click)=\"addChild()\">Value</span><br>\n      <span (click)=\"addChild(true)\">Object</span><br>\n      <span (click)=\"addChild(true, true)\">Array</span>\n    </span>\n    <span *ngIf=\"settings.options.edit.key || settings.options.edit.value\"\n          (click)=\"((item.isKeyEditable() && settings.options.edit.key) || settings.options.edit.value) && item.toggleEdit()\"\n          [innerHTML]=\"icons.editChild.html | sanitizeHtml\"></span>\n    <span *ngIf=\"settings.options.delete\"\n          (click)=\"item.delete();onChange.emit('delete')\"\n          [innerHTML]=\"icons.deleteChild.html | sanitizeHtml\"></span>\n  </span>\n  <span *ngIf=\"item.edit\" class=\"float-right\">\n    <span (click)=\"onEnterKeyListener()\"\n          [innerHTML]=\"icons.confirmEditChild.html | sanitizeHtml\"></span>\n    <span (click)=\"onEscapeKeyListener()\"\n          [innerHTML]=\"icons.cancelEditChild.html | sanitizeHtml\"></span>\n  </span>\n</span>\n", styles: [".float-right{float:right}.row-key-value{display:inline-block;word-break:break-all}.dropdown-content{display:none;position:absolute;background-color:#f1f1f1;min-width:50px;padding:3px;box-shadow:0 8px 16px #0003;z-index:1}.dropdown-content span{margin:5px;width:100%}.dropdown-content span:hover{background-color:#ddd;cursor:pointer}\n"], dependencies: [{ kind: "directive", type: i1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: i1.NgStyle, selector: "[ngStyle]", inputs: ["ngStyle"] }, { kind: "pipe", type: i2.SanitizeHtmlPipe, name: "sanitizeHtml" }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: NgxJsonTableKeyComponent, decorators: [{
            type: Component,
            args: [{ selector: '[ngx-json-table-key]', template: "<span [style]=\"{'margin-left': 20 * item.level + 'px'}\">\n  <span *ngIf=\"!item.isComplex\"\n        [innerHTML]=\"icons.simpleChild.html | sanitizeHtml\"></span>\n  <span *ngIf=\"item.isComplex\"\n        [innerHTML]=\"icons[item.showChildren ? 'collapse' : 'expand'].html | sanitizeHtml\"></span>\n  <span *ngIf=\"(!item.isNew && !settings.options.edit.key) || !item.edit || !item.isKeyEditable()\"\n        [ngStyle]=\"{cursor: item.isComplex ? 'pointer' : ''}\"\n        (click)=\"item.isComplex && item.toggleShowChildren($event['ctrlKey'])\" class=\"row-key-value\">{{item.key}}\n    <span style=\"color: darkgray\" *ngIf=\"item.isComplex\">\n      {{(item.isArray ? '[' : '{') + item.children.length + (item.isArray ? ']' : '}')}}\n    </span>\n  </span>\n  <span *ngIf=\"(item.isNew || settings.options.edit.key) && item.edit && item.isKeyEditable()\">\n    <input [value]=\"item.key\" #keyInput\n           [ngStyle]=\"{'border-color': item.error ? 'red' : ''}\"\n           (keyup)=\"item.key = keyInput.value.trim()\"/>\n  </span>\n  <span *ngIf=\"!item.edit && item.showEditPanel\" class=\"float-right\">\n    <span *ngIf=\"item.isComplex && settings.options.add\" (click)=\"toggleDropdownMenu(dropdown)\"\n          [innerHTML]=\"icons.addChild.html | sanitizeHtml\"></span>\n    <span class=\"dropdown-content\" #dropdown>\n      <span (click)=\"addChild()\">Value</span><br>\n      <span (click)=\"addChild(true)\">Object</span><br>\n      <span (click)=\"addChild(true, true)\">Array</span>\n    </span>\n    <span *ngIf=\"settings.options.edit.key || settings.options.edit.value\"\n          (click)=\"((item.isKeyEditable() && settings.options.edit.key) || settings.options.edit.value) && item.toggleEdit()\"\n          [innerHTML]=\"icons.editChild.html | sanitizeHtml\"></span>\n    <span *ngIf=\"settings.options.delete\"\n          (click)=\"item.delete();onChange.emit('delete')\"\n          [innerHTML]=\"icons.deleteChild.html | sanitizeHtml\"></span>\n  </span>\n  <span *ngIf=\"item.edit\" class=\"float-right\">\n    <span (click)=\"onEnterKeyListener()\"\n          [innerHTML]=\"icons.confirmEditChild.html | sanitizeHtml\"></span>\n    <span (click)=\"onEscapeKeyListener()\"\n          [innerHTML]=\"icons.cancelEditChild.html | sanitizeHtml\"></span>\n  </span>\n</span>\n", styles: [".float-right{float:right}.row-key-value{display:inline-block;word-break:break-all}.dropdown-content{display:none;position:absolute;background-color:#f1f1f1;min-width:50px;padding:3px;box-shadow:0 8px 16px #0003;z-index:1}.dropdown-content span{margin:5px;width:100%}.dropdown-content span:hover{background-color:#ddd;cursor:pointer}\n"] }]
        }], ctorParameters: function () { return []; }, propDecorators: { item: [{
                type: Input
            }], settings: [{
                type: Input
            }], icons: [{
                type: Input
            }], onChange: [{
                type: Output
            }], onEscapeKeyListener: [{
                type: HostListener,
                args: ['keyup.escape']
            }], onEnterKeyListener: [{
                type: HostListener,
                args: ['keyup.enter']
            }] } });
//# sourceMappingURL=data:application/json;base64,